<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>源码 on zzzi的小站</title><link>https://zzzicode.github.io/tags/%E6%BA%90%E7%A0%81/</link><description>Recent content in 源码 on zzzi的小站</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 20 Nov 2023 16:18:50 +0800</lastBuildDate><atom:link href="https://zzzicode.github.io/tags/%E6%BA%90%E7%A0%81/rss.xml" rel="self" type="application/rss+xml"/><item><title>Small_spring17</title><link>https://zzzicode.github.io/post/small_spring17/</link><pubDate>Mon, 20 Nov 2023 16:18:50 +0800</pubDate><guid>https://zzzicode.github.io/post/small_spring17/</guid><description>&lt;blockquote>
&lt;p>🥩 small_spring17&lt;/p>
&lt;/blockquote>
&lt;p>在之前的章节中我们彻底完成了spring的核心功能，将整个bean声明周期中涉及到的核心方法都进行了完善，使得bean的创建可以更加灵活，在本节中我们进一步扩充现有spring的功能，将jdbc的功能整合到现有的spring项目中，使其具有查询数据库的功能，相关的代码我放到了
&lt;a href="https://github.com/zzziCode/small-spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item><item><title>Small_spring16</title><link>https://zzzicode.github.io/post/small_spring16/</link><pubDate>Sun, 19 Nov 2023 13:23:39 +0800</pubDate><guid>https://zzzicode.github.io/post/small_spring16/</guid><description>&lt;blockquote>
&lt;p>🍖 small_spring16&lt;/p>
&lt;/blockquote>
&lt;p>在之前的章节中，我们实现了&lt;code>spring&lt;/code>中最重要的&lt;code>IOC&lt;/code>和&lt;code>AOP&lt;/code>的相关核心功能，并且利用三级缓存解决了循环依赖的问题，但是在属性填充的过程中，一直都是直接将字符串传递给bean中对应的属性，这会导致一些类型转换的问题，并且并不是所有属性都是&lt;code>string&lt;/code>的类型，所以本节中我们将会解决bean属性填充中类型转换的问题，以&lt;code>applyPropertyValues&lt;/code>方法为入口，相关代码我放到了
&lt;a href="https://github.com/zzziCode/small-spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item><item><title>Small_spring15</title><link>https://zzzicode.github.io/post/small_spring15/</link><pubDate>Thu, 16 Nov 2023 14:02:08 +0800</pubDate><guid>https://zzzicode.github.io/post/small_spring15/</guid><description>&lt;blockquote>
&lt;p>🥬 small_spring15&lt;/p>
&lt;/blockquote>
&lt;p>经过之前的编码，spring最核心的IOC和AOP的内容已经基本搭建完成，IOC章节中实现了bean的定义和注册，属性填充，读取配置文件，应用上下文，修改，初始化，销毁，aware感知，&lt;code>FactoryBean&lt;/code>，事件监听。AOP章节中实现了对普通bean进行增强，自动扫描bean的注册，代理对象注入属性的内容。但是到目前为止，一个关键的问题还没有解决，那就是循环依赖，本节中就来解决这个问题，相关的代码我放到了
&lt;a href="https://github.com/zzziCode/small-spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item><item><title>14.给代理对象的属性设置值</title><link>https://zzzicode.github.io/post/small_spring14/</link><pubDate>Mon, 13 Nov 2023 20:35:39 +0800</pubDate><guid>https://zzzicode.github.io/post/small_spring14/</guid><description>&lt;blockquote>
&lt;p>🍟 14.给代理对象的属性设置值&lt;/p>
&lt;/blockquote>
&lt;p>​ 上一节中使用注解的形式进行属性填充，但是填充的是普通的bean，也就是说代理对象的属性还都是&lt;code>null&lt;/code>，这一节中我们就来解决这个问题，改变代理对象的创建时机，使得创建的bean代理对象内部的被代理对象的属性也不为空，但是并不是直接让代理对象本身的属性不为空，而是增加一个&lt;code>target&lt;/code>，&lt;code>target&lt;/code>的内部属性不为空，相关的代码我放到了
&lt;a href="https://github.com/zzziCode/small-spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item><item><title>13.通过注解注入属性信息</title><link>https://zzzicode.github.io/post/13.%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E6%B3%A8%E5%85%A5%E5%B1%9E%E6%80%A7%E4%BF%A1%E6%81%AF/</link><pubDate>Mon, 13 Nov 2023 09:43:01 +0800</pubDate><guid>https://zzzicode.github.io/post/13.%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E6%B3%A8%E5%85%A5%E5%B1%9E%E6%80%A7%E4%BF%A1%E6%81%AF/</guid><description>&lt;blockquote>
&lt;p>🌶️ 13.通过注解注入属性信息&lt;/p>
&lt;/blockquote>
&lt;p>​ 上一节中我们新增了一种bean的注册方式：包扫描+&lt;code>@Component&lt;/code>注解。这种方式实现了只用指定扫描哪些包，程序自动将这些包下使用了&lt;code>@Component&lt;/code>注解的bean注册到注册表中，同时bean还可以使用占位符的形式从属性文件中读取属性值来填充，但是这两部分是&lt;strong>分开&lt;/strong>的，所以本节中在bean自动注册过程中引入了注解进行属性注入的模块，可以使用&lt;code>@Value&lt;/code>注解可以注入普通属性，使用&lt;code>@Autowired&lt;/code>和&lt;code>@Qualifier&lt;/code>注解注入bean对象，相关的代码我放到了
&lt;a href="https://github.com/zzziCode/small-spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中，并且注解属性注入的过程和包扫描的过程都加入了bean的生命周期&lt;/p></description></item><item><title>12.包扫描和属性占位符</title><link>https://zzzicode.github.io/post/12.%E5%8C%85%E6%89%AB%E6%8F%8F%E5%92%8C%E5%B1%9E%E6%80%A7%E5%8D%A0%E4%BD%8D%E7%AC%A6/</link><pubDate>Sun, 12 Nov 2023 13:19:10 +0800</pubDate><guid>https://zzzicode.github.io/post/12.%E5%8C%85%E6%89%AB%E6%8F%8F%E5%92%8C%E5%B1%9E%E6%80%A7%E5%8D%A0%E4%BD%8D%E7%AC%A6/</guid><description>&lt;blockquote>
&lt;p>🥒 12.包扫描和属性占位符&lt;/p>
&lt;/blockquote>
&lt;p>​ 本节实现了另外一种bean的配置方式，并且对于bean的属性来说，配置的时候还可以使用占位符的形式从属性文件中读取，做到一次配置，多次使用的目的，文章中涉及到的代码放到了
&lt;a href="https://github.com/zzziCode/small-spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中，主要分为自动扫描bean的注册以及修改bean属性的配置方式。&lt;/p></description></item><item><title>11.在bean的生命周期中加入AOP</title><link>https://zzzicode.github.io/post/11.%E5%9C%A8bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%AD%E5%8A%A0%E5%85%A5aop/</link><pubDate>Fri, 10 Nov 2023 15:39:52 +0800</pubDate><guid>https://zzzicode.github.io/post/11.%E5%9C%A8bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%AD%E5%8A%A0%E5%85%A5aop/</guid><description>&lt;blockquote>
&lt;p>🥔 11.在bean的生命周期中加入AOP&lt;/p>
&lt;/blockquote>
&lt;p>​ 在上一节中我们将IOC的部分彻底补充完整，现在的简易spring框架已经有了bean定义，注册，属性填充依赖注入，xml文件解析，应用上下文，修改，初始化和销毁，感知注入容器资源，多种方式多种类型创建bean以及事件机制，本节中在原有项目的基础上增加了&lt;code>AOP&lt;/code>的功能，将从&lt;code>AOP&lt;/code>的实现到将&lt;code>AOP&lt;/code>融入现有spring框架中进行介绍，相关的代码我放到了
&lt;a href="https://github.com/zzziCode/small-spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item><item><title>10.引入事件机制</title><link>https://zzzicode.github.io/post/10.%E5%BC%95%E5%85%A5%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</link><pubDate>Tue, 07 Nov 2023 14:34:18 +0800</pubDate><guid>https://zzzicode.github.io/post/10.%E5%BC%95%E5%85%A5%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</guid><description>&lt;blockquote>
&lt;p>🍆 10.引入事件机制&lt;/p>
&lt;/blockquote>
&lt;p>​ 在上一节中，我们实现了多种类型多种方式创建bean多种类型的bean对象，本节中在此基础上，添加了事件功能，也就是当某些事件发生时，程序能够立马做出一些反应，就好像是一直在等着某些事件的发生。例如用户注册完成时，系统会给当前注册用户发送一些新人优惠福利。用户上线将自动给好友推送其上线消息等。本节中涉及到的代码我放到了
&lt;a href="https://github.com/zzziCode/small-spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item><item><title>9.原型bean和FactoryBean</title><link>https://zzzicode.github.io/post/9.%E5%8E%9F%E5%9E%8Bbean%E5%92%8Cfactorybean/</link><pubDate>Mon, 06 Nov 2023 18:19:26 +0800</pubDate><guid>https://zzzicode.github.io/post/9.%E5%8E%9F%E5%9E%8Bbean%E5%92%8Cfactorybean/</guid><description>&lt;blockquote>
&lt;p>🍑 9.原型bean和&lt;code>FactoryBean&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>​ 在上一节中，我们实现了向bean中注入容器资源的功能，注入时不用关心配置文件中，需要什么就实现什么资源接口即可，之后资源的注入统一在初始化时执行。这使得bean的功能更强大也更灵活。但是至今为止，我们还只是创建单例的bean，没有实现如何创建原型模式的bean，并且bean的创建只能从配置文件中获取，一旦bean涉及到的配置太多，xml文件的编写就会异常复杂，是否可以使用更方便的java代码编写bean的配置并控制bean的实例化呢？所以本节中有两个目标：&lt;/p>
&lt;ol>
&lt;li>创建多种模式的bean（单例或者原型）&lt;/li>
&lt;li>以多种方式创建bean对象（xml或者java代码）&lt;/li>
&lt;/ol>
&lt;p>​ 本节涉及到的代码我放到了
&lt;a href="https://github.com/zzziCode/small-spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item><item><title>8.使用回调机制注入资源</title><link>https://zzzicode.github.io/post/8.%E4%BD%BF%E7%94%A8%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6%E6%B3%A8%E5%85%A5%E8%B5%84%E6%BA%90/</link><pubDate>Mon, 06 Nov 2023 13:09:13 +0800</pubDate><guid>https://zzzicode.github.io/post/8.%E4%BD%BF%E7%94%A8%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6%E6%B3%A8%E5%85%A5%E8%B5%84%E6%BA%90/</guid><description>&lt;blockquote>
&lt;p>🍍 8.使用回调机制注入资源&lt;/p>
&lt;/blockquote>
&lt;p>在上一节中，我们在原有项目的基础上增加了初始化和销毁模块，并且实现方式有两种，分别是xml配置和实现接口，在初始化和销毁时可以进行资源的管理。本节中我们进一步&lt;strong>扩展&lt;/strong>bean的功能，使其可以获取到spring中的一些容器资源，为了获得这些容器资源，需要一些成员变量接收，然后在生命周期中增加这些变量的注入代码，最后bean对象就可以使用这些容器资源了，具体的代码我放到了
&lt;a href="https://github.com/zzziCode/small-spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item><item><title>7.引入初始化和销毁逻辑</title><link>https://zzzicode.github.io/post/7.%E5%BC%95%E5%85%A5%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E9%94%80%E6%AF%81%E9%80%BB%E8%BE%91/</link><pubDate>Fri, 03 Nov 2023 18:42:11 +0800</pubDate><guid>https://zzzicode.github.io/post/7.%E5%BC%95%E5%85%A5%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E9%94%80%E6%AF%81%E9%80%BB%E8%BE%91/</guid><description>&lt;blockquote>
&lt;p>🥭7.引入初始化和销毁逻辑&lt;/p>
&lt;/blockquote>
&lt;p>​ 在上一节中，我们实现了应用上下文，并且在应用上下文中加入了修改模块，主要是在bean的生命周期的实例化之前和之后分别加入修改逻辑，本节中继续在这个项目的基础上增加一个模块：&lt;strong>初始化和销毁模块&lt;/strong>，分别用于初始化bean内部所需要的一些信息，以及在bean使用完毕之后，销毁bean的实例化信息，使得项目向着标准的spring框架更进一步，本节中涉及到的代码放到了
&lt;a href="https://github.com/zzziCode/small-spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item><item><title>6.引入ApplicationContext和后置处理器</title><link>https://zzzicode.github.io/post/6.%E5%BC%95%E5%85%A5applicationcontext%E5%92%8C%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/</link><pubDate>Thu, 02 Nov 2023 18:35:38 +0800</pubDate><guid>https://zzzicode.github.io/post/6.%E5%BC%95%E5%85%A5applicationcontext%E5%92%8C%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8/</guid><description>&lt;blockquote>
&lt;p>🍏 6.引入&lt;code>ApplicationContext&lt;/code>和后置处理器&lt;/p>
&lt;/blockquote>
&lt;p>​ 在上节中，我们实现了从配置文件中读取bean的配置信息，也就是说在实例化之前增加了一个配置文件的读取和利用的模块，但资源文件读取还是要手动调用&lt;code>loadBeanDefinitions&lt;/code>方法，没有模拟出spring中真正的配置文件加载过程。所以，本节中我们继续完善spring框架，对外提供&lt;strong>修改&lt;/strong>的接口，可以在bean 对象注册后但未实例化之前，对 Bean 的定义信息 &lt;code>BeanDefinition&lt;/code> 执行修改操作。还可以在bean对象实例化之后进行修改。并且将bean对象的配置文件加载，注册，实例化，修改等操作都融合到一个&lt;strong>上下文操作类&lt;/strong>中，本节中主要是将之前的一些操作都进行封装，&lt;u>对外只暴露这个上下文操作类&lt;/u>，使其更加符合spring框架的特点。本节中涉及到的代码放在了
&lt;a href="https://github.com/zzziCode/small-spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item><item><title>5.将bean的注册信息放入配置文件</title><link>https://zzzicode.github.io/post/5.%E5%B0%86bean%E7%9A%84%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%E6%94%BE%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link><pubDate>Wed, 01 Nov 2023 09:21:26 +0800</pubDate><guid>https://zzzicode.github.io/post/5.%E5%B0%86bean%E7%9A%84%E6%B3%A8%E5%86%8C%E4%BF%A1%E6%81%AF%E6%94%BE%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid><description>&lt;blockquote>
&lt;p>🍒 5.将bean的注册信息放入配置文件&lt;/p>
&lt;/blockquote>
&lt;p>之前几节已经实现了将bean的创建交给IOC容器，并且创建和属性填充已经分开，但是bean的定义、注册、属性填充、对象调用都是&lt;strong>手动&lt;/strong>在测试方法中实现的，这与真正的spring并不相符，所以本节在之前的基础上将spring中bean的定义，注册，属性填充等都配置到&lt;strong>配置文件&lt;/strong>中，然后编写代码读取配置文件中的信息，完成定义，注册，属性填充等操作，使其变得更&lt;strong>像&lt;/strong>一个spring框架，详细的代码在
&lt;a href="https://github.com/zzziCode/small-spring.git" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item><item><title>4.bean的实例化和属性填充分离</title><link>https://zzzicode.github.io/post/4.bean%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%92%8C%E5%B1%9E%E6%80%A7%E5%A1%AB%E5%85%85%E5%88%86%E7%A6%BB/</link><pubDate>Tue, 31 Oct 2023 16:33:05 +0800</pubDate><guid>https://zzzicode.github.io/post/4.bean%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%92%8C%E5%B1%9E%E6%80%A7%E5%A1%AB%E5%85%85%E5%88%86%E7%A6%BB/</guid><description>&lt;blockquote>
&lt;p>🍐 4.bean的实例化和属性填充分离&lt;/p>
&lt;/blockquote>
&lt;p>本节中主要是修改上一节中留下来的小问题，上一节中实现了带参的bean对象创建，但是一旦当前bean对象依赖另一个bean对象时，这种创建方式就会失效，因为上一节的带参bean对象创建需要先得到所有的参数。也就是说，当内部依赖另外一个bean对象时，需要先将这个bean对象new出来，然后将其当成参数传递给getBean方法，但是这又不符合bean对象的设计模式了，我们前面千辛万苦将bean的创建交给了IOC容器，现在不能将bean的创建工作交给自己，所以这里需要另辟蹊径，来实现bean的另外一种创建模式（先创建再属性填充），具体的代码在
&lt;a href="https://github.com/zzziCode/small-spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item><item><title>3.创建带参bean对象</title><link>https://zzzicode.github.io/post/3.%E5%88%9B%E5%BB%BA%E5%B8%A6%E5%8F%82bean%E5%AF%B9%E8%B1%A1/</link><pubDate>Mon, 30 Oct 2023 20:51:28 +0800</pubDate><guid>https://zzzicode.github.io/post/3.%E5%88%9B%E5%BB%BA%E5%B8%A6%E5%8F%82bean%E5%AF%B9%E8%B1%A1/</guid><description>&lt;blockquote>
&lt;p>🍈 3.创建带参bean对象&lt;/p>
&lt;/blockquote>
&lt;p>本文主要是在上一章的基础上对上一章中代码存在的问题进行改造，上一章中将bean对象的创建交给了IOC容器，利用反射创建bean对象并保存到IOC容器中，但是忽略了一点，上章中代码只能创建不携带参数的bean对象，所以这一章主要解决的问题就是创建有参数的bean对象，正常的spring创建带参的bean对象时，参数应该注册到了BeanDefinition中，然后先创建然后属性填充，但是本节中我们直接一步到位，简化bean的创建过程。具体的代码在
&lt;a href="https://github.com/zzziCode/small-spring.git" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item><item><title>2.自动创建bean对象</title><link>https://zzzicode.github.io/post/2.%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BAbean%E5%AF%B9%E8%B1%A1/</link><pubDate>Mon, 30 Oct 2023 09:51:25 +0800</pubDate><guid>https://zzzicode.github.io/post/2.%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BAbean%E5%AF%B9%E8%B1%A1/</guid><description>&lt;blockquote>
&lt;p>🤔 2.自动创建bean对象&lt;/p>
&lt;/blockquote>
&lt;p>本节中主要是以上一节为基础，并对上一节制作的IOC容器进行改良，上一节中，bean对象的实例化是手动new出来的，这一节中将bean对象的创建交给IOC容器本身，并且为了考虑扩展性，尽可能的使得每一个类都只执行一个职责，最终让整个项目变得更加健壮，本节中创建的bean默认单例。关于项目的源码存放在
&lt;a href="https://github.com/zzziCode/small-spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item><item><title>1.创建spring容器</title><link>https://zzzicode.github.io/post/1.%E5%88%9B%E5%BB%BAspring%E5%AE%B9%E5%99%A8/</link><pubDate>Mon, 30 Oct 2023 08:50:31 +0800</pubDate><guid>https://zzzicode.github.io/post/1.%E5%88%9B%E5%BB%BAspring%E5%AE%B9%E5%99%A8/</guid><description>&lt;blockquote>
&lt;p>😀 1.创建spring容器&lt;/p>
&lt;/blockquote>
&lt;p>本文介绍small_spring的第一节知识，简单的实现一个最基础的spring中的容器，包括定义、存储、获取这个容器中的bean对象，相比于真正的spring源码只是一个简化版本，后面的章节会慢慢的对这个容器进行扩充，文章中涉及到的代码在
&lt;a href="https://github.com/zzziCode/small_spring" title="仓库" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
仓库
&lt;i class="fa fa-external-link-alt">&lt;/i>
&lt;/a>中&lt;/p></description></item></channel></rss>